{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/get-king-info.service.ts","webpack:///./src/app/king-info/king-info.component.html","webpack:///./src/app/king-info/king-info.component.scss","webpack:///./src/app/king-info/king-info.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<app-king-info></app-king-info>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'stackpros-test';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { KingInfoComponent } from './king-info/king-info.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    KingInfoComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { from } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GetKingInfoService {\n\n  constructor(private http: HttpClient) { }\n  \n  // private _url = \"http://mysafeinfo.com/api/data?list=englishmonarchs&format=json\";\n  //method to get data from API\n  data() {\n    const  headers = new  HttpHeaders().set(\"Content-Type\", \"application/json\");\n\n    return this.http.get('http://localhost:3000/data',{headers});\n  }\n}\n","module.exports = \"\\n<table class=\\\"table table-hover table-dark\\\">\\n  <thead class=\\\"thead-light\\\">\\n    <tr>\\n      <th scope=\\\"col\\\">Name</th>\\n      <th scope=\\\"col\\\">City</th>\\n      <th scope=\\\"col\\\">House</th>\\n      <th scope=\\\"col\\\">Years</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let post of posts\\\">\\n      <td >{{post.nm}}</td>\\n      <td>{{post.cty}}</td>\\n      <td>{{post.hse}}</td>\\n      <td>{{post.yrs}}</td>\\n    </tr>\\n      \\n  </tbody>\\n</table>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2tpbmctaW5mby9raW5nLWluZm8uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { GetKingInfoService } from '../get-king-info.service'\n\n@Component({\n  selector: 'app-king-info',\n  templateUrl: './king-info.component.html',\n  styleUrls: ['./king-info.component.scss']\n})\nexport class KingInfoComponent implements OnInit {\n\n  //class properties\n  posts = [];\n  constructor(private postsService: GetKingInfoService) { }\n  \n  ngOnInit() {\n    // Retrieve data from data service\n    this.postsService.data().subscribe(posts => this.updateArray(posts));\n            \n  }\n\n    //class method\n  updateArray(posts){\n        \n    //filter houses\n        this.posts = posts.filter(function (el) {\n        return el.hse !== \"House of Wessex\";\n      });\n\n      //arrange alphabetically\n      this.posts.sort((a, b) => a.nm.localeCompare(b.nm));\n\n      //acronym for city and reverse first name\n      for (var i = 0; i < this.posts.length; i++){\n        this.posts[i].cty = this.posts[i].cty.replace('United Kingdom', 'UK');\n        this.posts[i].nm = this.posts[i].nm.split(' ')[0].split('').reverse().join('');\n        }\n\n\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}